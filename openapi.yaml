openapi: 3.0.0
info:
  title: OnBase Document API
  description: Wrapper API of Hyland RESTful OnBase Document API
  version: v2
  license:
    name: GNU Affero General Public License Version 3
    url: http://www.gnu.org/licenses/agpl-3.0.en.html
  contact:
    name: IS Data Architecture Team
    url: https://is.oregonstate.edu/data-architecture
    email: isdataarchitecture@oregonstate.edu
externalDocs:
  description: GitHub Repository
  url: https://github.com/osu-mist/onbase-docs-api
servers:
  - url: https://api.oregonstate.edu/v2
security:
  - OAuth2:
      - full
paths:
  /onbase-docs/documents:
    get:
      summary: Get documents
      tags:
        - documents
      description: Get documents. At most 100 results will be retrieved.
      operationId: getDocuments
      parameters:
        - name: filter[documentTypeName]
          in: query
          required: true
          description: The name of the document type to store the document into
          example: 'PAR PAR Form'
          schema:
            type: string
        - name: filter[keywordTypeNames]
          in: query
          required: false
          description: >-
            The keyword Type names in pipe-delimited format. The order must match with
            filter[keywordValues].
          schema:
            type: array
            items:
              type: string
            minItems: 0
          style: pipeDelimited
          explode: false
          example: keyword_name_1|keyword_name_2
        - name: filter[keywordValues]
          in: query
          required: false
          description: >-
            The keyword values in pipe-delimited format. The order must match with
            filter[keywordTypeNames].
          schema:
            type: array
            items:
              type: string
            minItems: 0
          style: pipeDelimited
          explode: false
          example: keyword_value_1|keyword_value_2
        - name: filter[startDate]
          in: query
          required: false
          description: The starting date of the date range
          schema:
            type: string
            format: date
            example: '2020-01-01'
        - name: filter[endDate]
          in: query
          required: false
          description: The starting date of the date range
          schema:
            type: string
            format: date
            example: '2021-12-31'
      responses:
        '200':
          description: Document uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentSetResult'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Upload document
      tags:
        - documents
      description: Upload document
      operationId: postDocument
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                uploadedDocument:
                  type: string
                  format: binary
                  description: Update document
                documentTypeId:
                  type: string
                  description: The ID of the document type to store the document into
                  example: '1234'
                indexKey:
                  type: string
                  description: The index key for performing autofill document keywords
                  example: '1234'
              required:
                - uploadedDocument
                - documentTypeId
                - indexKey
              additionalProperties: false
      responses:
        '201':
          description: Document uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResult'
        '400':
          $ref: '#/components/responses/400'
        '413':
          $ref: '#/components/responses/413'
        '500':
          $ref: '#/components/responses/500'
  /onbase-docs/documents/{documentId}:
    get:
      summary: Get document metadata by document ID
      tags:
        - documents
      description: Gets document metadata by document ID
      operationId: getDocumentById
      parameters:
        - $ref: '#/components/parameters/documentId'
      responses:
        '200':
          description: Get document metadata successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /onbase-docs/documents/{documentId}/keywords:
    get:
      summary: Get keywords for an indexed document
      tags:
        - keywords
      description: Gets the keyword values for a document grouped by keyword type group and keyword type
      operationId: getDocumentKeywords
      parameters:
        - $ref: '#/components/parameters/documentId'
      responses:
        '200':
          description: Document keyword fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordsResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Sets all keyword values for an indexed document
      tags:
        - keywords
      description: Sets all keyword values for an indexed document. Existing values will be replaced with the supplied list of keyword values grouped by keyword type group and keyword type
      operationId: patchDocumentKeywords
      parameters:
        - $ref: '#/components/parameters/documentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Instance data for keywords on a document
              properties:
                keywords:
                  type: array
                  items:
                    properties:
                      typeId:
                        type: string
                        description: The unique identifier of the keyword type for this keyword value
                        example: '123'
                      values:
                        type: array
                        description: A List of keyword values that contain various formats of the keyword value
                        items:
                          type: object
                          properties:
                            value:
                              type: string
                              description: Value of keyword
                              example: '933012347'
                    required:
                      - typeId
                      - values
                    additionalProperties: false
      responses:
        '200':
          description: Document keyword updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordsResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /onbase-docs/documents/{documentId}/content:
    get:
      summary: Get document content
      tags:
        - document-content
      description: Get document content for a rendition of a revision
      operationId: getDocumentContent
      parameters:
        - $ref: '#/components/parameters/documentId'
      responses:
        '200':
          description: Document keyword fetched successfully
          content:
            '*/*':
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  /onbase-docs/document-types:
    get:
      summary: Get document types
      tags:
        - document-types
      description: Get document types
      operationId: getDocumentTypes
      parameters:
        - name: filter[documentTypeName]
          in: query
          required: true
          description: The name of the document type to store the document into
          example: 'PAR PAR Form'
          schema:
            type: string
      responses:
        '200':
          description: Document uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTypeSetResult'
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /onbase-docs/document-types/{documentTypeId}:
    get:
      summary: Get document type by ID
      tags:
        - document-types
      description: Get document type by ID
      operationId: getDocumentTypeById
      parameters:
        - $ref: '#/components/parameters/documentTypeId'
      responses:
        '200':
          description: Document uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTypeResult'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.oregonstate.edu/oauth2/token
          scopes:
            full: Full access to the API
  parameters:
    documentId:
      name: documentId
      in: path
      description: The unique identifier of a document
      required: true
      schema:
        type: string
    documentTypeId:
      name: documentTypeId
      in: path
      description: The unique identifier of a document type
      required: true
      schema:
        type: string
  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '413':
      description: Payload Too Large
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResult'
  schemas:
    SelfLink:
      properties:
        self:
          type: string
          format: uri
          description: Self-link of current resource
    DocumentResource:
      properties:
        id:
          type: string
          description: The unique identifier of a document
        type:
          type: string
          enum:
            - documents
        links:
          $ref: '#/components/schemas/SelfLink'
        attributes:
          type: object
          properties:
            name:
              type: string
              description: Name of the file
              example: 'Sample file name'
            documentTypeId:
              type: string
              description: The ID of the document type to store the document into
              example: '1234'
            createdByUserId:
              type: string
              description: The unique identifier of the user that created this document
              example: '123456'
            storedDate:
              type: string
              format: date-time
              description: The date/time this document was stored
              example: '2017-07-21T17:32:28Z'
            status:
              type: string
              description: The document status of Active, Deleted or Inactive
              enum:
                - Active
                - Deleted
                - Inactive
    KeywordsResource:
      properties:
        id:
          type: string
          description: The unique identifier of a document keywords. It's as same as the document ID
        type:
          type: string
          enum:
            - keywords
        links:
          $ref: '#/components/schemas/SelfLink'
        attributes:
          type: object
          properties:
            keywords:
              type: array
              items:
                properties:
                  typeId:
                    type: string
                    description: The unique identifier of the keyword type for this keyword value
                    example: '123'
                  name:
                    type: string
                    description: The name of the keyword type
                    example: DOC - General Info
                  values:
                    type: array
                    items:
                      type: object
                      properties:
                        value:
                          type: string
                          description: Value of keyword
                          example: '933012347'
                        formattedValue:
                          type: string
                          description: Formatted value of keyword
                          example: '933012347'
    DocumentTypeResource:
      properties:
        id:
          type: string
          description: The unique identifier of a document type
        type:
          type: string
          enum:
            - document-types
        links:
          $ref: '#/components/schemas/SelfLink'
        attributes:
          type: object
          properties:
            name:
              type: string
              description: Name of the document type
              example: 'PAR PAR Form'
            documentTypeGroupId:
              type: string
              description: The ID of the document type group
              example: '1234'
    DocumentResult:
      properties:
        links:
          $ref: '#/components/schemas/SelfLink'
        data:
          $ref: '#/components/schemas/DocumentResource'
    DocumentSetResult:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/SelfLink'
        data:
          type: array
          items:
            $ref: '#/components/schemas/DocumentResource'
    KeywordsResult:
      properties:
        links:
          $ref: '#/components/schemas/SelfLink'
        data:
          $ref: '#/components/schemas/KeywordsResource'
    DocumentTypeResult:
      properties:
        links:
          $ref: '#/components/schemas/SelfLink'
        data:
          $ref: '#/components/schemas/DocumentTypeResource'
    DocumentTypeSetResult:
      type: object
      properties:
        links:
          $ref: '#/components/schemas/SelfLink'
        data:
          type: array
          items:
            $ref: '#/components/schemas/DocumentTypeResource'
    ErrorObject:
      properties:
        status:
          type: string
          description: HTTP status code
          example: '123'
        title:
          type: string
          description: A short, user readable summary of the error
          example: Not Found
        code:
          type: string
          description: An application-specific error code
          example: '1234'
        detail:
          type: string
          description: A long description of the error that may contain instance-specific
            details
        links:
          properties:
            about:
              type: string
              format: uri
              description: A link to further information about the error
              example: https://developer.oregonstate.edu/documentation/error-reference#1234
    ErrorResult:
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorObject'
